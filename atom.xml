<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://voidint.github.io</id>
    <title>voidint</title>
    <updated>2021-03-10T02:09:06.567Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://voidint.github.io"/>
    <link rel="self" href="https://voidint.github.io/atom.xml"/>
    <subtitle>身未动，心已远。</subtitle>
    <logo>https://voidint.github.io/images/avatar.png</logo>
    <icon>https://voidint.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, voidint</rights>
    <entry>
        <title type="html"><![CDATA[基于JuiceFS搭建个人网盘]]></title>
        <id>https://voidint.github.io/post/juicefs-wangpan/</id>
        <link href="https://voidint.github.io/post/juicefs-wangpan/">
        </link>
        <updated>2021-03-09T09:20:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是juicefs">什么是JuiceFS</h1>
<blockquote>
<p>JuiceFS 是为云端设计的共享文件系统。<br>
云端：采用云服务中的对象存储作为后端，综合性价比极高。<br>
共享：上千台机器同时挂载，高性能并发读写，共享数据。<br>
易用：POSIX、HDFS、NFS 兼容，无门槛对接现有应用。</p>
</blockquote>
<p>以上是<a href="https://juicefs.com/">JuiceFS</a>的官方定义。简单来说，JuiceFS就是一个基于对象存储的分布式文件系统。</p>
<h1 id="目标">目标</h1>
<p>基于JuiceFS搭建一个存储在阿里云OSS之上的个人网盘。主机A、B上挂载该网盘后，能做到互通有无，即可读可写。</p>
<h1 id="前期准备">前期准备</h1>
<p>1、申请一个阿里云账号，将AccessKey ID导出到环境变量<code>ACCESS_KEY</code>，将AccessKey Secret导出到环境变量<code>SECRET_KEY</code>。<br>
2、购买阿里云OSS服务并创建bucket。bucket的名字暂时定为<code>voidint</code>。<br>
3、准备两台主机。此次实验我准备了一台公有云上的虚拟机以及一台MacBook Pro。<br>
4、准备一台Redis服务器，且以上的两台主机均可以访问此Redis服务。本次实验中我将Redis服务部署在了公有云虚拟机之上。<br>
5、为Redis设置一个强密码并导出到环境变量<code>REDIS_PASSWORD</code>。</p>
<h1 id="搭建过程">搭建过程</h1>
<h2 id="构建juicefs二进制程序">构建juicefs二进制程序</h2>
<pre><code class="language-shell">$ git clone https://github.com/juicedata/juicefs.git
$ cd juicefs 
$ make
</code></pre>
<p>建议使用源代码构建，千万不要按照<a href="https://juicefs.com/docs/zh/getting_started.html">上手指南</a>中所说通过<code>curl</code>下载juicefs。也许是文档未及时更新，官方文档上所描述的均为Python缩写的juicefs客户端程序，而<strong>本次实验所用到的是go语言所编写的juicefs客户端程序</strong>。</p>
<h2 id="格式化网盘">格式化网盘</h2>
<pre><code class="language-shell">$ juicefs help format
NAME:
   juicefs format - format a volume

USAGE:
   juicefs format [command options] REDIS-URL NAME

OPTIONS:
   --block-size value       size of block in KiB (default: 4096)
   --compress value         compression algorithm (lz4, zstd, none) (default: &quot;lz4&quot;)
   --storage value          Object storage type (e.g. s3, gcs, oss, cos) (default: &quot;file&quot;)
   --bucket value           A bucket URL to store data (default: &quot;/Users/voidint/.juicefs/local&quot;)
   --access-key value       Access key for object storage (env ACCESS_KEY)
   --secret-key value       Secret key for object storage (env SECRET_KEY)
   --encrypt-rsa-key value  A path to RSA private key (PEM)
   --force                  overwrite existing format (default: false)
</code></pre>
<p>格式化的命令及选项如上所示，需要关注的选项分别为<code>--storage</code>和<code>--bucket</code>。由于本次实验使用的是阿里云OSS，因此将storage选项设置为<code>oss</code>。按照<a href="https://github.com/juicedata/juicefs/blob/main/docs/en/how_to_setup_object_storage.md#alibaba-cloud-object-storage-service">文档</a>所述，将bucket选项值设置为<code>https://voidint</code>。</p>
<p>另外，由于阿里云的操作凭证信息已经导出到了<code>ACCESS_KEY</code>和<code>SECRET_KEY</code>这两个环境变量，因此无需再重复设置format子命令中相关的选项值。</p>
<p>由于网盘中的文件元数据会被存储到Redis，还需要指定一个Redis的URL（<a href="https://pkg.go.dev/github.com/go-redis/redis#ParseURL">格式</a>），这里指定公有云上主机的IP地址，如<code>113.31.11.123</code>。</p>
<p>还需要给网盘取一个显示的名字，如<code>alicloud</code>（此处暂不支持中文字符）。</p>
<pre><code class="language-shell"># 两台主机上分别执行以下命令：
$ ./juicefs format --storage oss --bucket http://voidint 113.31.11.123 alicloud
</code></pre>
<h2 id="挂载网盘">挂载网盘</h2>
<pre><code class="language-shell">$ juicefs help mount
NAME:
   juicefs mount - mount a volume

USAGE:
   juicefs mount [command options] REDIS-URL MOUNTPOINT

OPTIONS:
   --metrics value           address to export metrics (default: &quot;:9567&quot;)
   --no-usage-report         do not send usage report (default: false)
   -d, --background          run in background (default: false)
   --no-syslog               disable syslog (default: false)
   -o value                  other FUSE options
   --attr-cache value        attributes cache timeout in seconds (default: 1)
   --entry-cache value       file entry cache timeout in seconds (default: 1)
   --dir-entry-cache value   dir entry cache timeout in seconds (default: 1)
   --enable-xattr            enable extended attributes (xattr) (default: false)
   --get-timeout value       the max number of seconds to download an object (default: 60)
   --put-timeout value       the max number of seconds to upload an object (default: 60)
   --io-retries value        number of retries after network failure (default: 30)
   --max-uploads value       number of connections to upload (default: 20)
   --buffer-size value       total read/write buffering in MB (default: 300)
   --prefetch value          prefetch N blocks in parallel (default: 3)
   --writeback               upload objects in background (default: false)
   --cache-dir value         directory paths of local cache, use colon to separate multiple paths (default: &quot;/Users/voidint/.juicefs/cache&quot;)
   --cache-size value        size of cached objects in MiB (default: 1024)
   --free-space-ratio value  min free space (ratio) (default: 0.1)
   --cache-partial-only      cache only random/small read (default: false)
</code></pre>
<p>挂载命令需要设置的选项和参数很少，<code>-d</code>可以使其以守护进程方式运行，<code>REDIS-URL</code>参数用于指定Redis服务地址，<code>MOUNTPOINT</code>用于指定目录挂载点。</p>
<pre><code class="language-shell"># 两台主机上分别执行以下命令：
$ ./juicefs mount -d 113.31.11.123 ~/jfs
</code></pre>
<h2 id="测试网盘读写">测试网盘读写</h2>
<p>在等待挂载完毕后，便可以开始对网盘进行读写测试。</p>
<pre><code class="language-shell"># 两台主机上分别执行以下命令：
$ echo $(hostname) &gt;&gt; ~/jfs/hostname.txt
$ cat ~/jfs/hostname.txt
voidint
113-31-11-123
</code></pre>
<p>从输出可知，两台主机已经挂载了同一块网盘。</p>
<h2 id="卸载网盘">卸载网盘</h2>
<pre><code class="language-shell">$ juicefs help umount
NAME:
   juicefs umount - unmount a volume

USAGE:
   juicefs umount [command options] MOUNTPOINT

OPTIONS:
   --force, -f  unmount a busy mount point by force (default: false)
</code></pre>
<p>卸载网盘的方式也极为简单，只需要指定挂载目录即可。</p>
<pre><code class="language-shell"># 两台主机上分别执行以下命令：
$ j umount ~/jfs
</code></pre>
<h2 id="再次挂载网盘">再次挂载网盘</h2>
<p>为了验证卸载后重新挂载依然能够读写之前的文件，下面重新挂载该网盘。</p>
<pre><code class="language-shell"># 两台主机上分别执行以下命令：
$ ./juicefs mount -d 113.31.11.123 ~/jfs
$ ls -lh ~/jfs
-rw-r--r--  1 voidint  staff    21B  3  9 18:47 hostname.txt
</code></pre>
<p>可以看到hostname.txt文件依然还存在。大功告成！</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://juicefs.com/docs/zh/intro.html">JuiceFS文档</a></li>
<li><a href="https://github.com/juicedata/juicefs">JuiceFS GitHub</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[goproxy.io内部私有化部署]]></title>
        <id>https://voidint.github.io/post/goproxyio-installation/</id>
        <link href="https://voidint.github.io/post/goproxyio-installation/">
        </link>
        <updated>2020-03-14T09:58:28.000Z</updated>
        <content type="html"><![CDATA[<p>最近在公司内部搭建了一个<a href="https://goproxy.io/zh/">goproxy.io</a>的服务，总结并记录一下备忘。</p>
<p>goproxy.io本身已经比较成熟，对部署也非常友好，按照官方的文档一步一步搭建应该都会比较顺利。当然我也不是对官方文档的无意义复制粘贴，我将从以下三个方面进行阐述：</p>
<h1 id="goproxyio服务的搭建">goproxy.io服务的搭建</h1>
<ul>
<li>安装go环境(要求1.13及以上版本)</li>
</ul>
<pre><code class="language-shell">$ yum install golang -y
</code></pre>
<ul>
<li>安装git</li>
</ul>
<pre><code class="language-shell">$ yum install git -y
</code></pre>
<ul>
<li>安装goproxy</li>
</ul>
<pre><code class="language-shell">$ mkdir -p /opt/goproxy &amp;&amp; cd /opt/goproxy
$ git clone https://github.com/goproxyio/goproxy.git
$ cd goproxy
$ make
$ mv ./bin/goproxy /usr/local/bin/goproxy
</code></pre>
<ul>
<li>启动goproxy服务（监听8080端口）</li>
</ul>
<pre><code class="language-shell">$ mkdir -p /opt/goproxy/go_cache
$ goproxy -cacheDir /opt/goproxy/go_cache -exclude example.io -proxy https://goproxy.io -listen 0.0.0.0:8080
</code></pre>
<h1 id="解决go-get方式拉取私有库问题">解决go get方式拉取私有库问题</h1>
<p>明确下目标。所谓的go get方式拉取私有库，指的是能通过<code>go get -u -v -insecure example.io/xxx/yyy</code>方式拉取到内部私有仓库中的go代码。example.io指的是内部的私有域名。</p>
<p>假设已经按照以上步骤在10.0.1.2安装了goproxy.io服务。</p>
<p>安装govanityurls服务（监听80端口）<br>
tonybai在其<a href="https://tonybai.com/2017/06/28/set-custom-go-get-import-path-for-go-package/">博文</a>中说的很清楚了，我也就不重复了。贴一张他博文中的配图，一图胜千言。</p>
<p>将内部私有域名example.io解析到安装了以上服务的10.0.1.2。</p>
<h1 id="开发人员本地环境配置">开发人员本地环境配置</h1>
<p>临时开启Go Module</p>
<pre><code class="language-shell">$ export GO111MODULE=on
</code></pre>
<p>永久开启Go Module</p>
<pre><code class="language-shell">$ go env -w GO111MODULE=on
</code></pre>
<p>设置go源代码库拉取的代理地址（http://10.0.1.2:8080）</p>
<pre><code class="language-shell">$ go env -w GOPROXY=&quot;http://10.0.1.2:8080,https://goproxy.cn,direct&quot;
</code></pre>
<p>可选：设置私有库（10.0.1.2上的goproxy服务本身也会将私有库重定向至gitlab.example.com）</p>
<pre><code class="language-shell">$ go env -w GOPRIVATE=&quot;example.io&quot; 
</code></pre>
<p>追加~/.gitconfig配置（修改为通过git下载源代码）</p>
<pre><code class="language-shell">$ git config --global url.&quot;ssh://git@gitlab.example.com&quot;.insteadOf &quot;http://gitlab.example.com&quot;
</code></pre>
<p>测试拉取外网的公开库</p>
<pre><code class="language-shell">$ go get -u -v github.com/go-xorm/xorm 
</code></pre>
<p>测试拉取内网的私有库（默认拉取master分支的最近一次提交）</p>
<pre><code class="language-shell">$ go get -u -v -insecure example.io/voidint/tsdump
</code></pre>
<p>测试拉取内网的私有库的指定版本（强烈建议为每个版本打上tag）</p>
<pre><code class="language-shell">$ go get -u -v -insecure example.io/voidint/tsdump@v1.0.0
</code></pre>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://goproxy.io/zh/docs/enterprise.html">部署公司内部自己的 goproxy.io 服务</a></li>
<li><a href="https://tonybai.com/2017/06/28/set-custom-go-get-import-path-for-go-package/">定制Go Package的Go Get导入路径</a></li>
<li><a href="https://tonybai.com/2017/06/30/go-get-go-packages-in-private-code-repo-by-govanityurls/">使用govanityurls让私有代码仓库中的go包支持go get</a></li>
<li><a href="http://holys.im/2016/09/20/go-get-in-gitlab/">如何使用 go get 下载 gitlab 私有项目</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Namespaces初体验]]></title>
        <id>https://voidint.github.io/post/linux-namespaces-first-experience/</id>
        <link href="https://voidint.github.io/post/linux-namespaces-first-experience/">
        </link>
        <updated>2020-02-25T09:45:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="简介">简介</h1>
<p>下面是<a href="https://coolshell.cn/articles/17010.html">酷壳</a>给出的关于Linux Namespaces的介绍：</p>
<blockquote>
<p>Linux Namespace是Linux提供的一种内核级别环境隔离的方法。不知道你是否还记得很早以前的Unix有一个叫chroot的系统调用（通过修改根目录把用户jail到一个特定目录下），chroot提供了一种简单的隔离模式：chroot内部的文件系统无法访问外部的内容。Linux Namespace在此基础上，提供了对UTS、IPC、mount、PID、network、User等的隔离机制。</p>
</blockquote>
<p>当前Linux一共实现了6种不同类型的Namespace</p>
<table>
<thead>
<tr>
<th>Namespace类型</th>
<th><strong>系统调用参数</strong></th>
<th><strong>内核版本</strong></th>
<th><strong>隔离内容</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Mount Namespace</td>
<td>CLONE_NEWNS</td>
<td>2.4.19</td>
<td>挂载点（文件系统）</td>
</tr>
<tr>
<td>UTS Namespace</td>
<td>CLONE_NEWUTS</td>
<td>2.6.19</td>
<td>主机名与域名</td>
</tr>
<tr>
<td>IPC Namespacce</td>
<td>CLONE_NEWIPC</td>
<td>2.6.19</td>
<td>信号量、消息队列和共享内存</td>
</tr>
<tr>
<td>PID Namespace</td>
<td>CLONE_NEWPID</td>
<td>2.6.24</td>
<td>进程编号</td>
</tr>
<tr>
<td>Network Namespace</td>
<td>CLONE_NEWNET</td>
<td>2.6.29</td>
<td>网络设备、网络栈、端口等等</td>
</tr>
<tr>
<td>User Namespace</td>
<td>CLONE_NEWUSER</td>
<td>3.8</td>
<td>用户和用户组</td>
</tr>
</tbody>
</table>
<p>Namespace的API主要使用如下3个系统调用：</p>
<ul>
<li>clone(): 创建新进程。</li>
<li>unshare(): 将进程移出某个Namespace。</li>
<li>setns(): 将进程加入到Namespace中。</li>
</ul>
<h1 id="体验">体验</h1>
<h2 id="uts-namespace">UTS Namespace</h2>
<p>UTS Namespace用于隔离nodename和domainname两个系统标识，即在不同的Namespace中允许拥有各自的hostname。</p>
<pre><code class="language-go">// 在GOPATH下新建一个名为mydocker的目录，并在该目录下新建文件main.go。

package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/exec&quot;
	&quot;syscall&quot;
)

func main() {
	cmd := exec.Command(&quot;bash&quot;)
	cmd.SysProcAttr = &amp;syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS,
	}
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = append(cmd.Env, `PS1=\[\e[32;1m\][\u@\h \W]$&gt;\[\e[0m\]`)

	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
</code></pre>
<p>以上代码通过exec.Command(&quot;bash&quot;)方式fork了一个bash子进程，并且使用了CLONE_NEWUTS标识符去创建了一个Namespace。下面验证下bash子进程与mydocker父进程是否处于不同的的UTS Namespace中。</p>
<pre><code class="language-shell">// 查看最初的系统hostname
$ hostname
ubuntu14.04

// 以root身份运行mydocker程序
$ sudo ./mydocker

// 在隔离的UTS Namespace下修改hostname为hello
root@ubuntu14:/home/voidint# hostname -b hello
root@ubuntu14:/home/voidint# hostname
hello

// 退出bash子进程并查看hostname是否发生变化
root@ubuntu14:/home/voidint# exit
exit

// 可以看到hostname并未发生变化
$ hostname
ubuntu14.04
</code></pre>
<h2 id="pid-namespace">PID Namespace</h2>
<p>PID Namespace用于隔离进程ID，同一个进程在不同的PID Namespace中可以拥有不同的PID。以docker容器为例，每个容器对于宿主机而言都是一个进程，若在容器内部查看到该进程的PID为1，但在宿主机上查看到的PID并非为1，这就是由于容器内拥有独立的PID Namespace的缘故。</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/exec&quot;
	&quot;syscall&quot;
)

func main() {
	cmd := exec.Command(&quot;bash&quot;)
	cmd.SysProcAttr = &amp;syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS | syscall.CLONE_NEWIPC | syscall.CLONE_NEWPID,
	}
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = append(cmd.Env, `PS1=\[\e[32;1m\][\u@\h \W]$&gt;\[\e[0m\]`)

	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
</code></pre>
<p>编译并运行以上程序，查看当前Namespace的PID，PID为1。</p>
<pre><code class="language-shell">$ echo $$
1
</code></pre>
<p>在宿主机上新开一个shell，并通过pstree -pl查看mydocker的PID为2692。注意，这里不能使用ps命令去查看，因为ps、top之类的命令会读取/proc目录下内容，由于此处并未进行Mount Namespace的隔离，查看到的/proc目录下内容并不真实和准确。</p>
<h2 id="mount-namespace">Mount Namespace</h2>
<p>Mount Namespace用来隔离各个进程看到的挂载点视图。在Mount Namespace中调用mount()或者umount()都仅仅只是影响当前Namespace内的文件系统，对于全局的文件系统并没有影响。</p>
<pre><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;os&quot;
	&quot;os/exec&quot;
	&quot;syscall&quot;
)

func main() {
	cmd := exec.Command(&quot;bash&quot;)
	cmd.SysProcAttr = &amp;syscall.SysProcAttr{
		Cloneflags: syscall.CLONE_NEWUTS |
			syscall.CLONE_NEWIPC |
			syscall.CLONE_NEWPID |
			syscall.CLONE_NEWNS,
	}
	cmd.Stdin = os.Stdin
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	cmd.Env = append(cmd.Env, `PS1=\[\e[32;1m\][\u@\h \W]$&gt;\[\e[0m\]`)

	if err := cmd.Run(); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
</code></pre>
<p>运行以上程序，在启动的bash子进程中执行ps -ef，依然可以看到宿主机上的所有进程，这是由于proc文件系统是继承自宿主机。下面重新挂载proc文件系统，并再次查看ps -ef的输出。</p>
<pre><code class="language-shell">$ mount -t proc proc /proc

$ ps -ef
UID        PID  PPID  C STIME TTY          TIME CMD
root         1     0  0 18:11 pts/1    00:00:00 bash
root        14     1  0 18:16 pts/1    00:00:00 ps -ef
</code></pre>
<p>可以看到，重新挂载proc文件系统后，ps命令仅能看到容器内的进程了，符合预期。</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://www.amazon.cn/dp/B072ZDHK9S/ref=sr_1_1?ie=UTF8&amp;qid=1535615095&amp;sr=8-1&amp;keywords=%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%86%99docker">《自己动手写Docker》</a></li>
<li><a href="http://man7.org/linux/man-pages/man7/namespaces.7.html">Namespaces</a></li>
<li><a href="https://coolshell.cn/articles/17010.html">DOCKER基础技术：LINUX NAMESPACE（上）</a></li>
<li><a href="https://coolshell.cn/articles/17029.html">DOCKER基础技术：LINUX NAMESPACE（下）</a></li>
<li><a href="http://www.infoq.com/cn/articles/docker-kernel-knowledge-namespace-resource-isolation">Docker背后的内核知识——Namespace资源隔离</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux用户登录密码的生成]]></title>
        <id>https://voidint.github.io/post/linux-password/</id>
        <link href="https://voidint.github.io/post/linux-password/">
        </link>
        <updated>2020-02-25T09:24:33.000Z</updated>
        <content type="html"><![CDATA[<h1 id="从自动化需求说起">从自动化需求说起</h1>
<p>如何生成一个Linux用户登录密码？可能有人会说用passwd生成。的确，passwd命令能够帮助我们重置用户登录密码，但是这并没有解答如何生成一个Linux用户登录密码的疑问。</p>
<p>对于这个问题，秉承着实用主义的精神，我原本也不会去深究。毕竟，安装的时候会设置密码，安装完毕后能通过passwd命令重置密码，学会这两点后已满足一般的需求已经绰绰有余了。</p>
<p>但是，对于自动化而言，知道以上的两点是不够的。Linux的自动化安装过程中，设置用户登录密码这事，肯定不能有人为干预，否则谈什么自动化。操作系统安装完毕后，也有可能会有重置用户密码的自动化需求，此时使用passwd命令来重置用户密码，也不见得是最佳的选择。</p>
<p>如果明白了密码的生成机制，那么这个自动化需求的难题也就迎刃而解了。</p>
<h1 id="密码生成理论">密码生成理论</h1>
<p>有Linux基础的人一定知道，Linux的用户登录密码信息是存放在/etc/shadow文件当中的，并且该文件只有root用户能够访问。以下会以voidint这个用户为例，看一下这个用户的密码信息。</p>
<pre><code class="language-shell">
$ sudo cat /etc/shadow | grep voidint
[sudo] password for voidint:
voidint:$6$3kheX/Vg$TGum9JEjfmGsj8Mfk3SUY/d/bWkJgnRimCxoaDTX7wcgrraYvU.fiziEUdpDglWc58uPZqWJhKNjiXayP9Q6b0:16892::::::
</code></pre>
<p>很明显，这个字符串被<code>:</code>符号分隔成了9段。我们这里只关注前两段，至于每一段具体的含义，可以戳这里自行阅读。第一段，是用户名称。第二段，即为用户密码。其实密码这种称呼并不准确。相对准确的说法是，用户密码明文经过某种哈希算法计算所获得的密文。但是，鉴于这个相对准确的说法实在太长太拗口，不便于表达。因此，以下提到的密码在无特别说明情况下，一律指的是密码明文的密文。</p>
<p>言归正传，看到这里相信好多人会和我有一样的思考: 是不是只要知道了密码生成的算法，并按照此算法生成一个满足Linux要求的密码，再把密码覆盖这个第二段的内容，那么用户密码就被重置了吗？</p>
<p>仔细看这段密码，会发现它是由<code>$xxx$xxx$xxx</code>的格式构成，即由<code>$</code>符号分隔的3端字符串构成。查阅资料后得知，这个格式可以进一步概括为<code>$id$salt$encrypted</code>。简要说明下<code>$id$salt$encrypted</code>中各个部分的含义:</p>
<ul>
<li>id: 加密(确切说是哈希)所用算法的代号。
<table>
<thead>
<tr>
<th><strong>ID</strong></th>
<th><strong>Method</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>MD5</td>
</tr>
<tr>
<td>2a</td>
<td>Blowfish (not in mainline glibc; added in some Linux distributions)</td>
</tr>
<tr>
<td>5</td>
<td>SHA-256 (since glibc 2.7)</td>
</tr>
<tr>
<td>6</td>
<td>SHA-512 (since glibc 2.7)</td>
</tr>
</tbody>
</table>
</li>
<li>salt: 由程序随机生成的字符串，即盐。</li>
<li>encrypted: 用户密码明文字符串加盐后使用哈希算法所得的哈希值，即哈希(明文+盐)。</li>
</ul>
<h2 id="特别说明">特别说明</h2>
<p>资料中还提到了另外一种形式的密码——<code>$id$rounds=yyy$salt$encrypted</code>。其中，盐的部分换成了rounds=yyy。yyy是一个由用户(调用方)提供的[1000, 999999999]之间的整数。</p>
<h1 id="密码生成实践">密码生成实践</h1>
<p>知道了上面这部分基础知识，那么接下来就是理论指导实践的环节了。具体可以借助什么工具来生成密码呢？这里使用的grub-crypt工具。你可以在某个Linux发行版中安装这个工具，也可以使用我提供的这个<a href="https://github.com/voidint/dockerfile/tree/master/grub-crypt">dockerfile</a>。</p>
<ul>
<li>使用sha512算法生成密码</li>
</ul>
<pre><code class="language-shell">
$ grub-crypt --sha-512
Password:
Retype password:
$6$r1jcut3Crl8bSIMo$XfKnrl4Ykzk2KPQ59MCXcUef9OjZWoZrIp7aeWwnCzIVQY1p/G1EiJQE4DYFej783NlvR5KtKYXs4P/hQaVst.
</code></pre>
<ul>
<li>将生成的密码写入/etc/shadow文件</li>
</ul>
<pre><code class="language-shell">
$ sudo cat /etc/shadow | grep voidint
voidint:$6$r1jcut3Crl8bSIMo$XfKnrl4Ykzk2KPQ59MCXcUef9OjZWoZrIp7aeWwnCzIVQY1p/G1EiJQE4DYFej783NlvR5KtKYXs4P/hQaVst.:16892:::::: 
</code></pre>
<ul>
<li>退出当前用户并使用新修改的密码登录</li>
</ul>
<h1 id="参考">参考</h1>
<ul>
<li><a href="http://man7.org/linux/man-pages/man3/crypt.3.html">CRYPT(3)</a></li>
<li><a href="https://www.thegeekdiary.com/centos-rhel-6-how-to-password-protect-grub-password-protected-booting/">CentOS / RHEL 6 : How to password protect grub (Password-Protected Booting)</a></li>
<li><a href="http://clavinli.github.io/2014/11/14/linux-command-hash-root-password-in-kickstart/">Command | kickstart之中rootpw密码生成方法</a></li>
<li><a href="http://cn.linux.vbird.org/linux_basic/0410accountmanager.php#shadow_file">鸟哥的Linux私房菜——/etc/shadow文件结构</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux下hpssacli配置 HP Smart Array]]></title>
        <id>https://voidint.github.io/post/hp-ssa-cli/</id>
        <link href="https://voidint.github.io/post/hp-ssa-cli/">
        </link>
        <updated>2020-02-25T09:05:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是hp-ssa-cli">什么是HP SSA CLI</h1>
<p>HP Smart Storage Administrator Command Line</p>
<h1 id="适用范围">适用范围</h1>
<p>HP Smart Array G6、G7、G8、G9</p>
<h1 id="创建raid的指导方针">创建RAID的指导方针</h1>
<ul>
<li>组成逻辑磁盘(RAID阵列)的物理驱动器应该是一致的。</li>
<li>为了更好地利用物理驱动器的空间容量，组成RAID阵列的每一块物理驱动器的容量应该趋于一致的。如果物理驱动器在容量上有差异，以容量最小的为准。</li>
</ul>
<h1 id="hpssacli操作模式">HPSSACLI操作模式</h1>
<ul>
<li>Console mode: 交互式的带上下文的命令行模式。</li>
<li>Command mode:</li>
</ul>
<h1 id="语法">语法</h1>
<p>不管是console mode还是command mode，典型的HP SSA CLI由这几部分组成: target、command、parameter（如果需要的话）。</p>
<p><target> <command> [parameter=value]</p>
<h2 id="target">target</h2>
<p>target是你所要配置的device的一种表示方法。device可以是controller、array、logical drive、physical drive。</p>
<h3 id="例子">例子</h3>
<ul>
<li>controller slot=3</li>
<li>controller wwn=500805F3000BAC11</li>
<li>controller slot=2 array A</li>
<li>controller chassisname=&quot;A&quot; array B logicaldrive 2</li>
<li>controller chassisname=&quot;A&quot; physicaldrive 1:0</li>
<li>controller all</li>
<li>controller slot=2 array all</li>
<li>controller slot=3 physicaldrive 1:2-1:5</li>
</ul>
<h2 id="command">command</h2>
<h3 id="配置类">配置类</h3>
<ul>
<li>add</li>
<li>create</li>
<li>delete</li>
<li>modify</li>
<li>remove</li>
<li>set target</li>
</ul>
<h3 id="非配置类">非配置类</h3>
<ul>
<li>diag</li>
<li>help</li>
<li>rescan</li>
<li>shorthand</li>
<li>show</li>
<li>version</li>
</ul>
<h2 id="去除警告性提示">去除警告性提示</h2>
<p>对于一些可能对数据安全产生危险的操作，程序会要求输入y/n后才会实际执行。如果你并不希望如此，可以增加一个force的参数来实现这样的目的。</p>
<p>比如，ctrl ch=&quot;Lab4&quot; ld 1 delete forced</p>
<h2 id="show命令">show命令</h2>
<p>通过此命令可以获取关于目标设备的一些信息。</p>
<p>基本的语法: <target> show [detail]|[status]</p>
<h1 id="典型用法">典型用法</h1>
<h2 id="删除目标设备">删除目标设备</h2>
<h3 id="语法-2">语法</h3>
<pre><code>&lt;target&gt; delete [forced]
</code></pre>
<p>由于删除设备会导致数据丢失，属于危险操作。默认情况下，程序会显示警告性的提示信息并要求输入y/n。如果要规避这种情况，可以加上force参数。</p>
<h3 id="例子-2">例子</h3>
<ul>
<li>ctrl ch=&quot;Lab 4&quot; delete forced</li>
<li>ctrl slot=3 ld all delete</li>
</ul>
<h2 id="创建逻辑驱动器">创建逻辑驱动器</h2>
<h3 id="语法-3">语法</h3>
<pre><code>&lt;target&gt; create type=ld [parameter=value]
</code></pre>
<p>一般而言<target>指的是controller，但如果是要在一个已经存在的阵列(array)基础上创建一个逻辑驱动器，那么<target>也可以是array。</p>
<p>如果你想要在一组物理驱动器(physical drive)之上创建一个逻辑驱动器(logical drive)，那么不需要先去创建一个阵列(array)。CLI有别于GUI，阵列是在创建逻辑驱动器时自动创建的。</p>
<h3 id="例子-3">例子</h3>
<ul>
<li>ctrl slot=5 create type=ld drives=1:0,1:1,1:3 raid=adg</li>
<li>ctrl slot=5 create type=ld drives=1:1-1:3 raid=adg</li>
<li>ctrl slot=5 create type=ld drives=1:7,1:10-2:5,2:8-2:12 raid=adg</li>
<li>ctrl slot=5 array A create type=ld size=330 raid=adg</li>
</ul>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://community.hpe.com/hpeb/attachments/hpeb/itrc-264/148204/3/HP%20Smart%20Storage%20Administrator%20User%20Guide.pdf">HP Smart Storage Administrator User Guide</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SAS3IRCU配置LSI SAS3系列RAID卡]]></title>
        <id>https://voidint.github.io/post/sas3ircu/</id>
        <link href="https://voidint.github.io/post/sas3ircu/">
        </link>
        <updated>2020-02-25T08:43:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="适用的controller">适用的controller</h1>
<ul>
<li>LSISAS3008</li>
<li>LSISAS3004</li>
</ul>
<h1 id="名词解释">名词解释</h1>
<ul>
<li>Controller:</li>
<li>IR:</li>
<li>Volume: 卷，基于物理驱动器通过创建冗余磁盘阵列所生成的虚拟磁盘。概念上等同于RAID冗余磁盘阵列。</li>
<li>Enclosure: 硬盘盒编号。</li>
<li>Bay: 即slot，指代硬盘盒的某个插槽。</li>
<li>HDD: Hard Disk Drive的缩写，即普通机械硬盘。</li>
<li>SSD: Solid State Drive的缩写，即固态硬盘。</li>
<li>SAS: 序列式SCSI（SAS：Serial Attached SCSI）是一种电脑集线的技术，其功能主要是作为周边零件的数据传输，例如：硬盘、CD-ROM等设备而设计的界面。</li>
<li>SATA: 串行ATA（Serial ATA: Serial Advanced Technology Attachment）是一种电脑总线，负责主板和大容量存储设备（如硬盘及光盘驱动器）之间的数据传输，主要用于个人电脑。</li>
</ul>
<h1 id="语法">语法</h1>
<pre><code>sas3ircu &lt;controller_#&gt; &lt;command&gt; &lt;parameters&gt;
</code></pre>
<h1 id="通用参数">通用参数</h1>
<ul>
<li>
<p>&lt;controller_#&gt;<br>
controller编号是程序分配给PCI插槽上的RAID硬件的唯一编号。比如，某个设备上包含2块LSI SAS3008的RAID卡，那么编号0就代表这第一块RAID卡，而编号1就指代另一块。这个编号的取值范围是0~255之间的整数。</p>
</li>
<li>
<p><a href="Enclosure:Bay">Enclosure:Bay</a><br>
由硬盘盒编号(Enclosure)和插槽编号(Bay/Slot)组成的物理驱动器唯一标识。通过DISPLAY命令可以查看到此信息。</p>
</li>
</ul>
<h1 id="退出码">退出码</h1>
<ul>
<li>0: 命令执行成功。</li>
<li>1: 错误的命令行参数或者操作失败。</li>
<li>2: 未发现指定的adapter。</li>
</ul>
<h1 id="create命令">CREATE命令</h1>
<p>创建volume须准守以下规则:</p>
<ul>
<li>组成一个volume的多块磁盘，包括卷的热备盘在内，都必须是在同一个controller上。</li>
<li>支持的RAID级别包括: RAID0、RAID1、RAID1E、RAID10。</li>
<li>同一个controller上至多创建2个volume。</li>
<li>RAID级别与物理驱动器数量限制
<ul>
<li>RAID0: Max=10; Min=2</li>
<li>RAID1: Max=2; Min=2</li>
<li>RAID1E: Max=10; Min=3</li>
<li>RAID10: Max=10; Min=3</li>
</ul>
</li>
<li>每个controller上能创建1个或者2个hot spare disk。</li>
<li>不允许跨SAS、SATA物理驱动器创建volume。</li>
<li>不允许跨普通硬盘和固态硬盘创建volume。</li>
</ul>
<h2 id="语法-2">语法</h2>
<pre><code>sas3ircu &lt;controller_#&gt; create &lt;volume_type&gt; &lt;size&gt; {&lt;Enclosure:Bay&gt;} [VolumeName] [noprompt]
</code></pre>
<h2 id="参数">参数</h2>
<ul>
<li>&lt;controller_#&gt;: controller编号。</li>
<li>&lt;volume_type&gt;: volume类型。等价于RAID级别。可选值包括RAID0、RAID1、RAID1E、RAID10。</li>
<li><size>: volume的容量大小，单位MB。MAX代表可用的最大容量值。</li>
<li><a href="Enclosure:Bay">Enclosure:Bay</a>:</li>
<li></li>
<li></li>
</ul>
<h1 id="delete命令">DELETE命令</h1>
<p>该命令用于删除指定controller下的所有的volume及其hot spare drives，但并不会对其它controller的配置参数产生任何影响。</p>
<h2 id="语法-3">语法</h2>
<pre><code>sas3ircu &lt;controller_#&gt; delete [noprompt]
</code></pre>
<h2 id="参数-2">参数</h2>
<ul>
<li>&lt;controller_#&gt;: controller编号。</li>
<li></li>
</ul>
<h1 id="deletevolume命令">DELETEVOLUME命令</h1>
<p>该命令用于删除指定controller下的指定volume及其hot spare drives，但并不会对其它controller的配置参数产生任何影响。如果某个hot spare对于剩余还未被删除的volume而言是不合适的，那么这个hot spare也会被删除。</p>
<h2 id="语法-4">语法</h2>
<pre><code>sas3ircu &lt;controller_#&gt; deletevolume &lt;volumeID&gt; [noprompt]
</code></pre>
<h2 id="参数-3">参数</h2>
<ul>
<li>&lt;controller_#&gt;: controller编号。</li>
<li><volumeID>: 待删除的volume ID。通过STATUS或者DISPLAY命令可以查看到volume ID相关的信息。</li>
<li></li>
</ul>
<h1 id="display命令">DISPLAY命令</h1>
<p>该命令用于显示LSI SAS3 controller相关的配置信息，包括controller类型、固件版本、BIOS版本、volume信息、物理驱动器信息，以及enclosure。</p>
<h2 id="语法-5">语法</h2>
<pre><code>sas3ircu &lt;controller_#&gt; display [filename]
</code></pre>
<h2 id="参数-4">参数</h2>
<ul>
<li>&lt;controller_#&gt;: controller编号。</li>
<li></li>
</ul>
<h2 id="命令输出样例">命令输出样例</h2>
<pre><code>Avago Technologies SAS3 IR Configuration Utility.
Version 15.00.00.00 (2016.11.21) 
Copyright (c) 2009-2016 Avago Technologies. All rights reserved. 

Read configuration has been initiated for controller 0
------------------------------------------------------------------------
Controller information
------------------------------------------------------------------------
  Controller type                         : SAS3008
  BIOS version                            : 8.29.02.00
  Firmware version                        : 12.00.02.00
  Channel description                     : 1 Serial Attached SCSI
  Initiator ID                            : 0
  Maximum physical devices                : 255
  Concurrent commands supported           : 4096
  Slot                                    : 0
  Segment                                 : 0
  Bus                                     : 1
  Device                                  : 0
  Function                                : 0
  RAID Support                            : Yes
------------------------------------------------------------------------
IR Volume information
------------------------------------------------------------------------
IR volume 1
  Volume ID                               : 323
  Status of volume                        : Okay (OKY)
  Volume wwid                             : 04b796b93430a2a7
  RAID level                              : RAID1
  Size (in MB)                            : 857353
  Boot                                    : Primary
  Physical hard disks                     :
  PHY[0] Enclosure#/Slot#                 : 2:0
  PHY[1] Enclosure#/Slot#                 : 2:1
------------------------------------------------------------------------
Physical device information
------------------------------------------------------------------------
Initiator at ID #0

Device is a Hard disk
  Enclosure #                             : 2
  Slot #                                  : 0
  SAS Address                             : 5000c50-0-9f3e-0741
  State                                   : Optimal (OPT)
  Size (in MB)/(in sectors)               : 858483/1758174767
  Manufacturer                            : SEAGATE 
  Model Number                            : ST900MM0168     
  Firmware Revision                       : N003
  Serial No                               : W4009ZLH0000E739G08J
  Unit Serial No(VPD)                     : W4009ZLH0000E739G08J
  GUID                                    : 5000c5009f3e0743
  Protocol                                : SAS
  Drive Type                              : SAS_HDD

Device is a Hard disk
  Enclosure #                             : 2
  Slot #                                  : 1
  SAS Address                             : 5000c50-0-9f40-be21
  State                                   : Optimal (OPT)
  Size (in MB)/(in sectors)               : 123/1758174767
  Manufacturer                            : SEAGATE 
  Model Number                            : ST900MM0168     
  Firmware Revision                       : N003
  Serial No                               : S403EKZH0000E7400Z53
  Unit Serial No(VPD)                     : S403EKZH0000E7400Z53
  GUID                                    : 5000c5009f40be23
  Protocol                                : SAS
  Drive Type                              : SAS_SSD

Device is a Enclosure services device
  Enclosure #                             : 2
  Slot #                                  : 36
  SAS Address                             : 500e004-a-aaaa-aa3e
  State                                   : Standby (SBY)
  Manufacturer                            : 12G SAS
  Model Number                            : Expander        
  Firmware Revision                       : RevB
  Serial No                               : 
  Unit Serial No(VPD)                     : 500e004aaaaaaa3e
  GUID                                    : N/A
  Protocol                                : SAS
  Device Type                             : Enclosure services device
------------------------------------------------------------------------
Enclosure information
------------------------------------------------------------------------
  Enclosure#                              : 1
  Logical ID                              : 5a0086f5:dc780000
  Numslots                                : 8
  StartSlot                               : 0
  Enclosure#                              : 2
  Logical ID                              : 500e004a:aaaaaa3e
  Numslots                                : 29
  StartSlot                               : 0
------------------------------------------------------------------------
SAS3IRCU: Command DISPLAY Completed Successfully.
SAS3IRCU: Utility Completed Successfully.
</code></pre>
<ul>
<li>IR Volume State可选值
<ul>
<li>Okay(OKY): 活跃、有效。如果配置的RAID级别能够提供一定的数据保护，那么此时用户数据就是受保护状态。</li>
<li>Degraded(DGD): 活跃、有效。由于配置已经发生了改变或者物理驱动器中某些处于不可用状态，用户数据实际上处于不完全受保护状态。</li>
<li>Failed(FLD): 失败。</li>
<li>Missing(MIS): 缺失。</li>
<li>Initializing(INIT): 初始化中。</li>
<li>Online(ONL): 已上线。</li>
</ul>
</li>
<li>Physical device State可选值
<ul>
<li>Online(ONL): 该物理驱动器是可用的并且已经是构成某个volume的一部分了。</li>
<li>HotSpare(HSP): 该物理驱动器已经处于热备状态。一旦对应的volume中有物理驱动器发生故障不可用，该物理驱动器就会顶替发生故障的物理驱动器。</li>
<li>Ready(RDY): 该物理驱动器已经处于预备(ready)状态，可以随时被当作一个普通的物理驱动器被使用，可以被分配到某个volume或者热备盘池(hot spare pool)。</li>
<li>Available(AVL): 该物理驱动器可能并不处于预备(ready)状态，并且不适合作为volume的一个物理驱动器，也不适合作为热备盘池中的一员。</li>
<li>Failed(FLD): 该物理驱动器发生故障或者已经下线。</li>
<li>Missing(MIS): 该物理驱动器已经被移除或者处于无响应状态。</li>
<li>Standby(SBY): 该设备不是一个硬盘设备。</li>
<li>OutofSync(OSY): 该物理驱动器是某个volume的一部分，但是它并没有与同样是volume一部分的其他物理驱动器进行同步。</li>
<li>Degraded(DGD): 该物理驱动器时某个volume的一部分并且处于降级(degraded)状态。</li>
<li>Rebuilding(RBLD): 该物理驱动器时某个volume的一部分并且处于重建(rebuilding)状态。</li>
<li>Optimal(OPT): 该物理驱动器时某个volume的一部分并且处于最优(optimal)状态。</li>
</ul>
</li>
<li>Physical device的Drive Type属性可选值
<ul>
<li>SAS_HDD: 物理驱动器是SAS普通机械硬盘。</li>
<li>SATA_HDD: 物理驱动器是SATA普通机械硬盘。</li>
<li>SAS_SSD: 物理驱动器是SAS固态硬盘。</li>
<li>SATA_SSD: 物理驱动器是SATA固态硬盘。</li>
</ul>
</li>
<li>Physical device的Protocol属性可选值
<ul>
<li>SAS: 物理驱动器支持SAS协议。</li>
<li>SATA: 物理驱动器支持SATA协议。</li>
</ul>
</li>
</ul>
<h1 id="hotspare命令">HOTSPARE命令</h1>
<p>该命令用来给热备池中添加或者删除一个物理驱动器。待添加的物理驱动器存储容量不能小于volume中各个物理驱动器存储容量最小的那个物理驱动器的存储容量。若想要确定各个物理驱动器的存储容量等信息，请参考DISPLAY命令。</p>
<p>创建热备盘时须准守以下规则:</p>
<ul>
<li>创建热备盘前至少已经存在一个RAID级别为RAID 1、RAID 10、RAID 1E的volume。因为RAID 0不具备数据冗余特性，因此无法为此创建热备盘。</li>
<li>可以为状态是inactive的volume创建热备盘。</li>
<li>对于HDD而言，若当前controller上的所有volume使用的是SATA磁盘，那么可以添加SAS的热备盘。若当前controller上的所有volume使用的是SAS磁盘，则无法再添加SATA的热备盘。</li>
<li>对于SSD而言，只要RAID卡固件允许，允许为SATA的volume添加SAS的热备盘，也可以为SAS的volume添加SATA的热备盘。</li>
<li>每个controller最多添加2块热备盘。</li>
<li>SSD可以作为HDD类型的volume的热备盘，HDD不可以作为SSD类型volume的热备盘。</li>
</ul>
<h2 id="语法-6">语法</h2>
<pre><code>sas3ircu &lt;controller_#&gt; hotspare [delete] &lt;Enclosure:Bay&gt;
</code></pre>
<h2 id="参数-5">参数</h2>
<ul>
<li>&lt;controller_#&gt;: controller编号。</li>
<li><a href="Enclosure:Bay">Enclosure:Bay</a>: 硬盘盒编号+物理驱动器编号，可以唯一标识一块物理驱动器。</li>
<li></li>
</ul>
<h1 id="status命令">STATUS命令</h1>
<p>该命令会显示当前已经存在volume，以及当前还在进行中的操作的状态。</p>
<h2 id="语法-7">语法</h2>
<pre><code>sas3ircu &lt;controller_#&gt; status
</code></pre>
<h2 id="参数-6">参数</h2>
<ul>
<li>&lt;controller_#&gt;: controller编号。</li>
</ul>
<h1 id="list命令">LIST命令</h1>
<p>该命令显示当前系统中的所有controller及其controller index组成的列表。</p>
<h2 id="语法-8">语法</h2>
<p>sas3ircu list</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://docs.broadcom.com/docs/12353382">SAS-3 Integrated RAID Configuration Utility (SAS3IRCU)</a></li>
<li><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000004345/b4b05091#it_server_sas3008_700035">LSI SAS3008文档</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98%E7%9B%92">Disk Enclosure</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98">HDD</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98">SSD</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E4%B8%B2%E5%88%97SCSI">SAS</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SATA">SATA</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git commit message后悔药]]></title>
        <id>https://voidint.github.io/post/git-commit-amend/</id>
        <link href="https://voidint.github.io/post/git-commit-amend/">
        </link>
        <updated>2020-02-25T08:33:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="场景描述">场景描述</h1>
<p>假设你创建了一个文件，并写入了一些内容，然后通过git add和git commit将此变更提交。提交之后才发现这个文件中少了一些内容，此时有两个选择摆在你面前：</p>
<ul>
<li>将文件内容补全，然后和之前一样git add、git commit。显然，你可以通过git log看到这两条commit记录。</li>
<li>回到过去，修改上一次提交的那个文件。如此一来，你的commit记录只会有一条。对于一些有代码洁癖并且看中git commit记录的程序员，这点很重要，特别是在开源项目中。</li>
</ul>
<h1 id="场景再现">场景再现</h1>
<p>初始化git仓库</p>
<pre><code class="language-shell">$ mkdir test &amp;&amp; cd test &amp;&amp; git init
</code></pre>
<p>第一次commit内容</p>
<pre><code class="language-shell">$ echo 'Hello world' &gt; README.md
$ git add .
$ git commit -m &quot;Add README.md&quot;
$ git log --oneline
c56f680 Add README.md
</code></pre>
<p>修改文件内容并合并到上一次的commit变更当中</p>
<pre><code class="language-shell">$ echo 'Hello voidint' &gt;&gt; README.md
$ git add .
$ git commit --amend --no-edit
$ git log --oneline
eb6c8cb Add README.md // hash值发生了变化
</code></pre>
<p>可以看到，在执行git commit --amend --no-edit之后，hash值由c56f680变成了eb6c8cb，但是message内容并没有发生变化，并且最重要的是只有一条commit记录。</p>
<p>如果要修改上一条的message，那么去掉--no-edit选项即可，git commit --amend -m &quot;xxxx&quot;。同理，commit记录同样只会有一条。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[容器内MySQL时区调整]]></title>
        <id>https://voidint.github.io/post/mysql-timezone/</id>
        <link href="https://voidint.github.io/post/mysql-timezone/">
        </link>
        <updated>2020-02-25T08:08:07.000Z</updated>
        <content type="html"><![CDATA[<p>从docker hub拉取的MySQL官方docker镜像，启动MySQL容器后，执行<code>select now()</code>语句，发现显示的时间与我宿主机的时间不一致且相差8小时。显然，需要重置MySQL的时区，将时区设置与宿主机保持一致，即东八区。</p>
<h1 id="如何为mysql设置时区">如何为MySQL设置时区？</h1>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html">MySQL 5.7官方文档</a>中提到了多种设置时区的方案，我们这里仅关注配置文件（MySQL官方称之为<a href="https://dev.mysql.com/doc/refman/5.7/en/option-files.html">Option Files</a>）的方案。</p>
<h2 id="配置文件中修改时区">配置文件中修改时区</h2>
<ul>
<li>
<p>配置项default-time-zone及取值<br>
依据文档可以通过在配置文件中增加default-time-zone='timezone'的配置项来修改时区。配置值的取值遵循以下规则：</p>
<blockquote>
<ul>
<li>
<p>The value 'SYSTEM' indicates that the time zone should be the same as the system time zone.</p>
</li>
<li>
<p>The value can be given as a string indicating an offset from UTC, such as '+10:00' or '-6:00'.</p>
</li>
<li>
<p>The value can be given as a named time zone, such as 'Europe/Helsinki', 'US/Eastern', or 'MET'. Named time zones can be used only if the time zone information tables in the mysql database have been created and populated.</p>
</li>
</ul>
</blockquote>
<p>我们选择第二种方式，通过UTC的偏移量来表示东八区，+8:00意味着在零时区的基础上往东偏移8个时区。</p>
</li>
<li>
<p>group<br>
官方文档中描述了配置文件的语法，包括注释、组、选项名、选项值等。其中组（group）是与我们当前遇到的问题息息相关的东西。配置项需要放置在正确的group下，官方表述如下：</p>
<blockquote>
<p>If an option group name is the same as a program name, options in the group apply specifically to that program.<br>
For example, the [mysqld] and [mysql] groups apply to the mysqld server and the mysql client program, respectively.</p>
</blockquote>
</li>
</ul>
<p>由于配置项default-time-zone是为了让MySQL Server调整默认时区，并结合上面有关group的表述，不难得出一个结论：default-time-zone配置项应该放置在名为[mysqld]的group下。</p>
<pre><code class="language-shell">[mysqld]
default-time_zone = '+8:00'
</code></pre>
<h2 id="配置文件位置">配置文件位置</h2>
<p>既然已经明确了通过修改配置文件来达到重置MySQL时区的目的，那么修改后的配置文件放哪儿呢？这是首先面临的一个问题。好在MySQL官方文档中已经告诉我们配置文件的读取顺序。</p>
<table>
<thead>
<tr>
<th><strong>File Name</strong></th>
<th><strong>Purpose</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>/etc/my.cnf</td>
<td>Global options</td>
</tr>
<tr>
<td>/etc/mysql/my.cnf</td>
<td>Global options</td>
</tr>
<tr>
<td><em>SYSCONFDIR</em>/my.cnf</td>
<td>Global options</td>
</tr>
<tr>
<td>$MYSQL_HOME/my.cnf</td>
<td>Server-specific options (server only)</td>
</tr>
<tr>
<td>defaults-extra-file</td>
<td>The file specified with <code>--defaults-extra-file</code></td>
</tr>
<tr>
<td>~/.my.cnf</td>
<td>User-specific options</td>
</tr>
<tr>
<td>~/.mylogin.cnf</td>
<td>User-specific login path options (clients only)</td>
</tr>
</tbody>
</table>
<p>再尝试查看MySQL的docker容器中的配置文件，docker run --rm mysql:5.7 cat /etc/mysql/my.cnf，我们看到了容器中的配置文件内容如下：</p>
<pre><code># Copyright (c) 2016, Oracle and/or its affiliates. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

!includedir /etc/mysql/conf.d/
!includedir /etc/mysql/mysql.conf.d/
</code></pre>
<p>这下这个疑问终于有了答案，我们可以将自定义的配置文件想办法放入容器中的/etc/mysql/conf.d/目录（放在/etc/mysql/mysql.conf.d/目录当然也同样OK）。</p>
<p>注意：在*nix系统下使用!includedir指令指定的配置文件目录下的配置文件扩展名必须是.cnf，在Windows系统下的扩展名可以是.ini或者.cnf。</p>
<h2 id="启动mysql容器">启动MySQL容器</h2>
<pre><code class="language-shell">$ docker run  -d --name mysql5.7 \
    -v /Users/voidint/dockerV/mysql/5.7/conf:/etc/mysql/conf.d \
    -e MYSQL_ROOT_PASSWORD='abc#123' \
    -p 3306:3306\
    mysql:5.7
</code></pre>
<p>参考MySQL官方docker镜像的说明，我们将上面步骤准备好的MySQL配置文件放置在/Users/voidint/dockerV/mysql/5.7/conf目录下，并通过docker -v选项将宿主机上的配置文件目录挂载到容器中的/etc/mysql/conf.d目录。这样在容器启动时就能读取到我们自定义的配置文件，时区配置也就生效了。</p>
<p>容器启动后，通过MySQL客户端连接上MySQL，再次执行select now()语句以验证MySQL的时区是否与宿主机时区保持一致。</p>
<h1 id="参考">参考</h1>
<ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/time-zone-support.html">MySQL Server Time Zone Support</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/option-files.html">Using Option Files</a></li>
<li><a href="https://hub.docker.com/_/mysql">MySQL Docker镜像</a></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么mysql -h localhost无法登录了？]]></title>
        <id>https://voidint.github.io/post/mysql-login-localhost/</id>
        <link href="https://voidint.github.io/post/mysql-login-localhost/">
        </link>
        <updated>2020-02-25T07:56:49.000Z</updated>
        <content type="html"><![CDATA[<p>我在自己的mac上安装了docker，并在docker中运行了mysql5.6容器。启动容器的方式大致如下：</p>
<pre><code class="language-shell">$ docker run --name mydb -d \
    -p 3306:3306 \
    -v /Users/voidint/dockerV/mysql/data:/var/lib/mysql \
    -e MYSQL_ROOT_PASSWORD=xxxxx \
    mysql:5.6
</code></pre>
<p>mysql服务正常启动之后，我想通过客户端连接此服务。于是，我顺理成章地在终端敲下了这样的命令</p>
<pre><code class="language-shell">$ mysql -u root -p
Enter password:
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)
</code></pre>
<p>非常意外，居然报错了。我记得以前都是这样敲的呀？怎么换成跑在docker里就行不通了？不科学！</p>
<pre><code class="language-shell">$ mysql -h localhost -uroot -p
Enter password:
ERROR 2002 (HY000): Can't connect to local MySQL server through socket '/tmp/mysql.sock' (2)
</code></pre>
<p>加上<code>-h</code>选项还是不行，气急败坏。气归气，问题还是要解决的，那就查查资料。然后，看到了这篇，在粗粗浏览过之后，发现有人建议用<code>-h 127.0.0.1</code>。</p>
<pre><code class="language-shell">$ mysql -h 127.0.0.1 -u root -p 
Enter password:
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 3823
Server version: 5.6.35 MySQL Community Server (GPL)

Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

mysql&gt;
</code></pre>
<p>试过之后，发现效果立竿见影。这简直颠覆了我的既有观念！</p>
<ul>
<li>难道localhost和127.0.0.1不是同一个东西？OMG！</li>
<li>那个socket文件/tmp/mysql.sock又是怎么一回事，指定了127.0.0.1怎么就正常了？</li>
</ul>
<p>在查阅了一些资料之后，终于对于这几个问题有了稍深入的理解：</p>
<h1 id="localhost和127001的区别">localhost和127.0.0.1的区别</h1>
<ul>
<li>localhost和127.0.0.1，前者是域名，后者是IP地址中特殊的一类回还地址。</li>
<li>许多时候localhost和127.0.0.1给人感觉是等价的，是由于在多数系统的/etc/hosts文件中，两者存在映射关系。</li>
<li>本机上的服务，如果通过localhost访问，可以不经过网卡，并且不受防火墙的限制。如果不经过网卡，那客户端和服务端要如何通信？答案就是socket。比如上面例子中的/tmp/mysql.sock。也因为不需要经过网卡，不需要TCP/IP协议的层层封包和层层解包过程，性能上会更出色一些。</li>
<li>本机上的服务，如果通过127.0.0.1访问，需要经过网卡，也可能受到防火墙限制。</li>
</ul>
<h1 id="参考资料">参考资料</h1>
<ul>
<li>https://hub.docker.com/_/mysql/</li>
<li>http://stackoverflow.com/questions/11657829/error-2002-hy000-cant-connect-to-local-mysql-server-through-socket-var-run</li>
<li>http://blog.onlycatch.com/post/7e371ca28621</li>
<li>http://i.joymvp.com/%E6%8A%80%E6%9C%AF/routing-traffic-localhost.html</li>
</ul>
]]></content>
    </entry>
</feed>